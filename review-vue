props 传递数据、events 触发事件和slot 内容分发就构成了Vue 组件的3 个API 来源，再复杂的组件也是由这3 部分构成的。
单个Slot
在子组件内使用特殊的＜s lo t>元素就可以为这个子组件开启一个s lot （插槽），在父组件模板
里，插入在子组件标签内的所有内容将替代子组件的＜slot> 标签及它的内容

作用域插槽是一种特殊的slot ，使用一个可以复用的模板替换己渲染元素。概念比较难理解，
我们先看一个简单的示例来了解它的基本

7.5.1 递归组件
组件在它的模板内可以递归地调用自己， 只要给组件设置name 的选项就可以了

7.5.3 动态组件
Vue.js 提供了一个特殊的元素＜component> 用来动态地挂载不同的组件， 使用is 特性来选择
要挂载的组件。

7.5.4 异步组件
当你的工程足够大， 使用的组件足够多时， 是时候考虑下性能问题了， 因为一开始把所有的
组件都加载是没必要的一笔开销。好在Vue.js 允许将组件定义为一个工厂函数，动态地解析组件。
Vue. 只在组件需要渲染时触发工厂函数， 并且把结果缓存起来，用于后面的再次渲染

工厂函数接收一个resolve 回调，在收到从服务器下载的组件定义时调用。也可以调用
reject( reason ）指示加载失败。这里setTimeout 只是为了演示异步，具体的下载逻辑可以自己决定，
比如把组件配置写成一个对象配置，通过Ajax 来请求，然后调用resolve 传入配置选项。




Vue 在观察到数据变化时并不是直接更新DOM，而是开启一个队列，并缓冲在同一事件循环
中发生的所有数据改变。在缓冲时会去除重复数据，从而避免不必要的计算和DOM 操作。然后，
在下一个事件循环tick 中， Vue 刷新队列井执行实际（己去重的）工作
<!DOCTYPE html>
<html>
    <head>

    </head>
    <body>
        <div id="app">
        
          <div id="hi" v-if="showDiv">it's txt</div>
          <!-- id后面不加， -->
          <button @click="geta">get txt</button>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        <script>
        
        var app = new Vue({
            el:'#app',
            data:{
                showDiv:false
            },
            methods:{
                geta: function(){
                    this.showDiv = true;
                    this.$nextTick(function(){
                        var text = document.getElementById("hi").innerHTML;
                        console.log(text);
                    })
                }
            }
        })
        </script>
    </body>
</html>

7.6.3 手动挂载实例
，我
们需要动态地去创建Vue 实例， Vue 提供了Vue.extend 和$mount 两个方法来手动挂载一个实例。
Vue.extend 是基础Vue 构造器，创建一个“子类”，参数是一个包含组件选项的对象。
<!DOCTYPE html>
<html>
    <head
    </head>
    <body>
        <div id="my-app">

        </div>
        <!-- dog 是字符串 -->
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        <script>
        var app = Vue.extend({
           template:'<div>hello world: {{hi}} </div>',
           data: function(){
               return {
                   hi: 'dog
               }
           }
        });
        new app().$mount("#my-app")
        </script>
    </body>
</html>







在组件内，来自store 的数据只能读取，不能手动改变，改变store 中数据的唯一途径就是显式
地提交mutations 。
